// Mocks generated by Mockito 5.4.4 from annotations
// in rush/test/wishlist/wishlist_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rush/core/domain/entities/product/product.dart' as _i8;
import 'package:rush/core/domain/entities/wishlist/wishlist.dart' as _i4;
import 'package:rush/core/domain/usecases/product/get_product.dart' as _i7;
import 'package:rush/core/domain/usecases/wishlist/add_account_wishlist.dart'
    as _i2;
import 'package:rush/core/domain/usecases/wishlist/delete_account_wishlist.dart'
    as _i6;
import 'package:rush/core/domain/usecases/wishlist/get_account_wishlist.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AddAccountWishlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddAccountWishlist extends _i1.Mock
    implements _i2.AddAccountWishlist {
  MockAddAccountWishlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required _i4.Wishlist? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [GetAccountWishlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAccountWishlist extends _i1.Mock
    implements _i5.GetAccountWishlist {
  MockGetAccountWishlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Wishlist>> execute({
    required String? accountId,
    String? search = r'',
    String? orderBy = r'created_at',
    bool? descending = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #search: search,
            #orderBy: orderBy,
            #descending: descending,
          },
        ),
        returnValue: _i3.Future<List<_i4.Wishlist>>.value(<_i4.Wishlist>[]),
      ) as _i3.Future<List<_i4.Wishlist>>);
}

/// A class which mocks [DeleteAccountWishlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAccountWishlist extends _i1.Mock
    implements _i6.DeleteAccountWishlist {
  MockDeleteAccountWishlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required String? wishlistId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #wishlistId: wishlistId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [GetProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProduct extends _i1.Mock implements _i7.GetProduct {
  MockGetProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i8.Product?> execute({required String? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#productId: productId},
        ),
        returnValue: _i3.Future<_i8.Product?>.value(),
      ) as _i3.Future<_i8.Product?>);
}
