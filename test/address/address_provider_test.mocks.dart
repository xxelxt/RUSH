// Mocks generated by Mockito 5.4.4 from annotations
// in rush/test/address/address_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rush/core/domain/entities/address/address.dart' as _i4;
import 'package:rush/core/domain/usecases/address/add_address.dart' as _i2;
import 'package:rush/core/domain/usecases/address/change_primary_address.dart'
    as _i8;
import 'package:rush/core/domain/usecases/address/delete_address.dart' as _i7;
import 'package:rush/core/domain/usecases/address/get_account_address.dart'
    as _i5;
import 'package:rush/core/domain/usecases/address/update_address.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AddAddress].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddAddress extends _i1.Mock implements _i2.AddAddress {
  MockAddAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required _i4.Address? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [GetAccountAddress].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAccountAddress extends _i1.Mock implements _i5.GetAccountAddress {
  MockGetAccountAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Address>> execute({required String? accountId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#accountId: accountId},
        ),
        returnValue: _i3.Future<List<_i4.Address>>.value(<_i4.Address>[]),
      ) as _i3.Future<List<_i4.Address>>);
}

/// A class which mocks [UpdateAddress].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateAddress extends _i1.Mock implements _i6.UpdateAddress {
  MockUpdateAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required _i4.Address? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [DeleteAddress].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAddress extends _i1.Mock implements _i7.DeleteAddress {
  MockDeleteAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required String? addressId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #addressId: addressId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ChangePrimaryAddress].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePrimaryAddress extends _i1.Mock
    implements _i8.ChangePrimaryAddress {
  MockChangePrimaryAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required _i4.Address? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
