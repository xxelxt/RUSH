// Mocks generated by Mockito 5.4.4 from annotations
// in rush/test/payment_method/payment_method_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rush/core/domain/entities/payment_method/payment_method.dart'
    as _i4;
import 'package:rush/core/domain/usecases/payment_method/add_payment_method.dart'
    as _i2;
import 'package:rush/core/domain/usecases/payment_method/change_primary_payment_method.dart'
    as _i8;
import 'package:rush/core/domain/usecases/payment_method/delete_payment_method.dart'
    as _i7;
import 'package:rush/core/domain/usecases/payment_method/get_account_payment_method.dart'
    as _i5;
import 'package:rush/core/domain/usecases/payment_method/update_payment_method.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AddPaymentMethod].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddPaymentMethod extends _i1.Mock implements _i2.AddPaymentMethod {
  MockAddPaymentMethod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required _i4.PaymentMethod? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [GetAccountPaymentMethod].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAccountPaymentMethod extends _i1.Mock
    implements _i5.GetAccountPaymentMethod {
  MockGetAccountPaymentMethod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.PaymentMethod>> execute({required String? accountId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#accountId: accountId},
        ),
        returnValue:
            _i3.Future<List<_i4.PaymentMethod>>.value(<_i4.PaymentMethod>[]),
      ) as _i3.Future<List<_i4.PaymentMethod>>);
}

/// A class which mocks [UpdatePaymentMethod].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdatePaymentMethod extends _i1.Mock
    implements _i6.UpdatePaymentMethod {
  MockUpdatePaymentMethod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required _i4.PaymentMethod? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #data: data,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [DeletePaymentMethod].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeletePaymentMethod extends _i1.Mock
    implements _i7.DeletePaymentMethod {
  MockDeletePaymentMethod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required String? paymentMethodId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #paymentMethodId: paymentMethodId,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ChangePrimaryPaymentMethod].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangePrimaryPaymentMethod extends _i1.Mock
    implements _i8.ChangePrimaryPaymentMethod {
  MockChangePrimaryPaymentMethod() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> execute({
    required String? accountId,
    required _i4.PaymentMethod? paymentMethod,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #accountId: accountId,
            #paymentMethod: paymentMethod,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
